#!/usr/bin/env tsx

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–º—ã
 */
interface ThemeCSSVariables {
  [key: string]: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
 */
interface InterfaceValidationResult {
  component: string;
  theme: string;
  isValid: boolean;
  errors: string[];
  missingVariables: string[];
  extraVariables: string[];
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
 */
interface PrefixValidationResult {
  component: string;
  theme: string;
  isValid: boolean;
  errors: string[];
  invalidPrefixes: string[];
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 */
interface ForbiddenVariablesValidationResult {
  component: string;
  theme: string;
  isValid: boolean;
  errors: string[];
  forbiddenVariables: string[];
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ SCSS —Ñ–∞–π–ª–∞
 */
function extractCSSVariablesFromSCSS(filePath: string): ThemeCSSVariables {
  const content = fs.readFileSync(filePath, 'utf-8');
  const variables: ThemeCSSVariables = {};
  
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const variableRegex = /--thepro-([^:]+):\s*([^;]+);/g;
  let match;
  
  while ((match = variableRegex.exec(content)) !== null) {
    const variableName = `--thepro-${match[1]}`;
    const variableValue = match[2].trim();
    variables[variableName] = variableValue;
  }
  
  return variables;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ types.ts
 */
function getComponentInterface(componentPath: string): string[] {
  const typesPath = path.join(componentPath, 'types.ts');
  
  if (!fs.existsSync(typesPath)) {
    return [];
  }
  
  const content = fs.readFileSync(typesPath, 'utf-8');
  const interfaceRegex = /export interface (\w*ThemeCSSVariables)\s*{([^}]+)}/s;
  const match = content.match(interfaceRegex);
  
  if (!match) {
    return [];
  }
  
  const interfaceContent = match[2];
  const variables: string[] = [];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const variableRegex = /'([^']+)':\s*string;/g;
  let varMatch;
  
  while ((varMatch = variableRegex.exec(interfaceContent)) !== null) {
    variables.push(varMatch[1]);
  }
  
  return variables;
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
function validateComponentThemeInterface(
  componentName: string,
  themePath: string,
  expectedVariables: string[]
): InterfaceValidationResult {
  const themeName = path.basename(themePath, '.scss');
  const actualVariables = extractCSSVariablesFromSCSS(themePath);
  const actualVariableNames = Object.keys(actualVariables);
  
  const missingVariables = expectedVariables.filter(
    expected => !actualVariableNames.includes(expected)
  );
  
  const extraVariables = actualVariableNames.filter(
    actual => !expectedVariables.includes(actual)
  );
  
  const isValid = missingVariables.length === 0 && extraVariables.length === 0;
  const errors: string[] = [];
  
  if (missingVariables.length > 0) {
    errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingVariables.join(', ')}`);
  }
  
  if (extraVariables.length > 0) {
    errors.push(`–õ–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${extraVariables.join(', ')}`);
  }
  
  return {
    component: componentName,
    theme: themeName,
    isValid,
    errors,
    missingVariables,
    extraVariables
  };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
function validateCSSVariablePrefixes(
  componentName: string,
  themePath: string
): PrefixValidationResult {
  const themeName = path.basename(themePath, '.scss');
  const content = fs.readFileSync(themePath, 'utf-8');
  
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const variableRegex = /--thepro-([a-zA-Z0-9-]+):/g;
  const expectedPrefix = `--thepro-${componentName.toLowerCase()}`;
  const invalidPrefixes: string[] = [];
  let match;
  
  while ((match = variableRegex.exec(content)) !== null) {
    const fullVariableName = `--thepro-${match[1]}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    if (!fullVariableName.startsWith(expectedPrefix)) {
      invalidPrefixes.push(fullVariableName);
    }
  }
  
  const isValid = invalidPrefixes.length === 0;
  const errors: string[] = [];
  
  if (invalidPrefixes.length > 0) {
    errors.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã: ${invalidPrefixes.join(', ')}`);
  }
  
  return {
    component: componentName,
    theme: themeName,
    isValid,
    errors,
    invalidPrefixes
  };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–µ–º
 */
function validateCSSVariablePrefixesForGlobalTheme(
  themeName: string,
  themePath: string
): PrefixValidationResult {
  const content = fs.readFileSync(themePath, 'utf-8');
  
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const variableRegex = /--thepro-([a-zA-Z0-9-]+):/g;
  const expectedPrefix = '--thepro-theme-';
  const invalidPrefixes: string[] = [];
  let match;
  
  while ((match = variableRegex.exec(content)) !== null) {
    const fullVariableName = `--thepro-${match[1]}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–µ–º
    if (!fullVariableName.startsWith(expectedPrefix)) {
      invalidPrefixes.push(fullVariableName);
    }
  }
  
  const isValid = invalidPrefixes.length === 0;
  const errors: string[] = [];
  
  if (invalidPrefixes.length > 0) {
    errors.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã: ${invalidPrefixes.join(', ')}`);
  }
  
  return {
    component: themeName,
    theme: themeName,
    isValid,
    errors,
    invalidPrefixes
  };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–∞—Ö —Å—Ç–∏–ª–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
function validateForbiddenGlobalVariables(
  componentName: string,
  themePath: string
): ForbiddenVariablesValidationResult {
  const themeName = path.basename(themePath, '.scss');
  const content = fs.readFileSync(themePath, 'utf-8');
  
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const globalVariableRegex = /--thepro-theme-([a-zA-Z0-9-]+):/g;
  const forbiddenVariables: string[] = [];
  let match;
  
  while ((match = globalVariableRegex.exec(content)) !== null) {
    const fullVariableName = `--thepro-theme-${match[1]}`;
    forbiddenVariables.push(fullVariableName);
  }
  
  const isValid = forbiddenVariables.length === 0;
  const errors: string[] = [];
  
  if (forbiddenVariables.length > 0) {
    errors.push(`–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${forbiddenVariables.join(', ')}`);
  }
  
  return {
    component: componentName,
    theme: themeName,
    isValid,
    errors,
    forbiddenVariables
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
async function validateAllThemes(): Promise<void> {
  console.log('üîç –ù–∞—á–∏–Ω–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–µ–º...\n');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const allPaths = await glob('src/components/*');
  const componentPaths = allPaths.filter(path => fs.statSync(path).isDirectory());
  const interfaceResults: InterfaceValidationResult[] = [];
  const prefixResults: PrefixValidationResult[] = [];
  const forbiddenResults: ForbiddenVariablesValidationResult[] = [];
  
  for (const componentPath of componentPaths) {
    const componentName = path.basename(componentPath);
    const typesPath = path.join(componentPath, 'types.ts');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª types.ts
    if (!fs.existsSync(typesPath)) {
      console.log(`‚ö†Ô∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentName}: —Ñ–∞–π–ª types.ts –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const expectedVariables = getComponentInterface(componentPath);
    
    if (expectedVariables.length === 0) {
      console.log(`‚ö†Ô∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentName}: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç`);
      continue;
    }
    
    console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentName}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:`);
    expectedVariables.forEach(variable => {
      console.log(`     ‚Ä¢ ${variable}`);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–º—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const themePaths = await glob(path.join(componentPath, 'styles/themes/*.scss'));
    
    for (const themePath of themePaths) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è 1: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
      const interfaceResult = validateComponentThemeInterface(componentName, themePath, expectedVariables);
      interfaceResults.push(interfaceResult);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è 2: –ü—Ä–µ—Ñ–∏–∫—Å—ã CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      const prefixResult = validateCSSVariablePrefixes(componentName, themePath);
      prefixResults.push(prefixResult);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è 3: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      const forbiddenResult = validateForbiddenGlobalVariables(componentName, themePath);
      forbiddenResults.push(forbiddenResult);
      
      const themeName = path.basename(themePath, '.scss');
      
      if (interfaceResult.isValid && prefixResult.isValid && forbiddenResult.isValid) {
        console.log(`   ‚úÖ ${themeName}: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å OK, –ø—Ä–µ—Ñ–∏–∫—Å—ã OK, –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ OK`);
      } else {
        const allErrors = [...interfaceResult.errors, ...prefixResult.errors, ...forbiddenResult.errors];
        console.log(`   ‚ùå ${themeName}: ${allErrors.join('; ')}`);
      }
    }
    
    console.log('');
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–µ–º
  console.log('üåç –ü—Ä–æ–≤–µ—Ä—è—é –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã...\n');
  
  const allGlobalPaths = await glob('src/themes/*');
  const globalThemePaths = allGlobalPaths.filter(path => fs.statSync(path).isDirectory());
  
  for (const themePath of globalThemePaths) {
    const themeName = path.basename(themePath);
    const themeFile = path.join(themePath, `${themeName}.scss`);
    
    if (!fs.existsSync(themeFile)) {
      console.log(`‚ö†Ô∏è  –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ ${themeName}: —Ñ–∞–π–ª ${themeName}.scss –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–µ–º—ã
    const expectedGlobalVariables = getComponentInterface('src/themes');
    
    if (expectedGlobalVariables.length === 0) {
      console.log(`‚ö†Ô∏è  –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ ${themeName}: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç`);
      continue;
    }
    
    console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è—é –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ç–µ–º—É: ${themeName}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:`);
    expectedGlobalVariables.forEach(variable => {
      console.log(`     ‚Ä¢ ${variable}`);
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è 1: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    const interfaceResult = validateComponentThemeInterface(themeName, themeFile, expectedGlobalVariables);
    interfaceResults.push(interfaceResult);
    
      // –í–∞–ª–∏–¥–∞—Ü–∏—è 2: –ü—Ä–µ—Ñ–∏–∫—Å—ã CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º --thepro-theme-)
  const prefixResult = validateCSSVariablePrefixesForGlobalTheme(themeName, themeFile);
    prefixResults.push(prefixResult);
    
    if (interfaceResult.isValid && prefixResult.isValid) {
      console.log(`   ‚úÖ ${themeName}: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å OK, –ø—Ä–µ—Ñ–∏–∫—Å—ã OK`);
    } else {
      const allErrors = [...interfaceResult.errors, ...prefixResult.errors];
      console.log(`   ‚ùå ${themeName}: ${allErrors.join('; ')}`);
    }
    
    console.log('');
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const allResults = [...interfaceResults, ...prefixResults, ...forbiddenResults];
  const validResults = allResults.filter(r => r.isValid);
  const invalidResults = allResults.filter(r => !r.isValid);
  
  console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${interfaceResults.length} —Ç–µ–º (3 –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ç–µ–º—É)`);
  console.log(`   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${validResults.length}`);
  console.log(`   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${invalidResults.length}`);
  
  if (invalidResults.length > 0) {
    console.log('\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
    for (const result of invalidResults) {
      console.log(`   ${result.component}/${result.theme}:`);
      for (const error of result.errors) {
        console.log(`     - ${error}`);
      }
    }
    process.exit(1);
  } else {
    console.log('\nüéâ –í—Å–µ —Ç–µ–º—ã –≤–∞–ª–∏–¥–Ω—ã!');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
validateAllThemes().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
  process.exit(1);
});
