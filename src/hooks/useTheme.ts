import { ref, computed } from 'vue'
import type { ThemeName } from '../types/theme'

export function useTheme() {
  // –ß–∏—Ç–∞–µ–º CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –ª—é–±–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–µ–º–æ–π
  const getCssVariable = (variableName: string, defaultValue?: string): string => {
    console.log('üîç useTheme: –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:', variableName)
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
    const currentTheme = getCurrentTheme()
    console.log('üîç useTheme: –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞:', currentTheme)
    
    // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-theme
    const themeElements = document.querySelectorAll('[data-theme]')
    console.log('üîç useTheme: –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–º–∞–º–∏:', themeElements.length)
    
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–æ–π
    for (let i = 0; i < themeElements.length; i++) {
      const themeElement = themeElements[i]
      const theme = themeElement.getAttribute('data-theme')
      
      // –ï—Å–ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
      if (theme === currentTheme) {
        const value = getComputedStyle(themeElement).getPropertyValue(variableName)
        
        console.log('üîç useTheme: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–æ–π:', {
          element: themeElement,
          theme,
          variableName,
          value: value.trim()
        })
        
        if (value && value.trim()) {
          console.log('üîç useTheme: –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–µ:', value.trim())
          return value.trim()
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º–µ, –∏—â–µ–º –≤ –ª—é–±–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
    for (let i = 0; i < themeElements.length; i++) {
      const themeElement = themeElements[i]
      const theme = themeElement.getAttribute('data-theme')
      const value = getComputedStyle(themeElement).getPropertyValue(variableName)
      
      console.log('üîç useTheme: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç:', {
        element: themeElement,
        theme,
        variableName,
        value: value.trim()
      })
      
      if (value && value.trim()) {
        console.log('üîç useTheme: –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ:', value.trim())
        return value.trim()
      }
    }
    
    // Fallback –∫ documentElement
    if (document.documentElement) {
      const value = getComputedStyle(document.documentElement).getPropertyValue(variableName)
      console.log('üîç useTheme: Fallback –∫ documentElement:', value.trim())
      if (value && value.trim()) {
        return value.trim()
      }
    }
    
    console.log('üîç useTheme: –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default:', defaultValue)
    return defaultValue || ''
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
  const getCurrentTheme = (): ThemeName => {
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å data-theme (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    const themeElement = document.querySelector('[data-theme]')
    if (themeElement) {
      const theme = themeElement.getAttribute('data-theme') as ThemeName
      if (theme && ['light', 'dark', 'green', 'starwars'].indexOf(theme) !== -1) {
        return theme
      }
    }
    return 'light' // fallback
  }

  return {
    getCssVariable,
    getCurrentTheme
  }
}
